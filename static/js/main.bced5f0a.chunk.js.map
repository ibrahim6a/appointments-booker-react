{"version":3,"sources":["Components/Form.js","Components/TimeSlot.js","Components/TimeSlots.js","App.js","index.js"],"names":["M","window","Form","state","date","user","fullName","email","availability","updateUser","event","currentState","target","name","value","setState","formSubmit","preventDefault","props","handleSubmit","elems","document","querySelectorAll","instance","Datepicker","init","disableWeekends","format","options","onSelect","toString","fetchAvailableTimes","className","onSubmit","this","type","onChange","Component","TimeSlot","actionLink","timeSlot","available","onClick","bookAppointment","TimeSlots","availableTimes","id","checkAvailabilityInArray","item","array","i","length","slot","setAvailability","anotherArray","mappedArray","map","time","bookSlot","key","App","selectedDate","selectedTime","refresh","showTimeSlots","sendRequestToServer","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","result","catch","error","ReactDOM","render","StrictMode","getElementById"],"mappings":"mNACMA,EAAIC,OAAOD,EA+DFE,E,4MA1DXC,MAAQ,CACJC,KAAM,GACNC,KAAM,CACFC,SAAU,WACVC,MAAO,gBAEXC,aAAc,I,EAYlBC,WAAa,SAACC,GAAW,IAEfC,EAFc,eACE,EAAKR,OAAnBE,KADY,EAGIK,EAAME,OAAtBC,EAHY,EAGZA,KAAMC,EAHM,EAGNA,MACdH,EAAaE,GAAQC,EACrB,EAAKC,SAAS,CAAEV,KAAMM,K,EAG1BK,WAAa,SAACN,GACVA,EAAMO,iBACN,EAAKC,MAAMC,aAAa,EAAKhB,MAAME,KAAM,EAAKF,MAAMC,O,kEAnBnC,IAAD,OACRgB,EAAQC,SAASC,iBAAiB,eAElCC,EADYvB,EAAEwB,WAAWC,KAAKL,EAAO,CAAEM,iBAAiB,EAAMC,OAAQ,iBACjD,GACzBJ,EAASK,QAAQC,SAAW,WACxB,EAAKd,SAAS,CAAEX,KAAMmB,EAASnB,KAAK0B,YAAc,EAAKC,wB,+BAkB/D,OACI,yBAAKC,UAAY,aACb,0BAAMC,SAAYC,KAAKlB,YACnB,yBAAKgB,UAAY,eACb,6CACA,2BAAOA,UAAY,GAAGG,KAAO,OAAOtB,KAAO,WAAWC,MAASoB,KAAK/B,MAAME,KAAKC,SAAU8B,SAAYF,KAAKzB,cAG9G,yBAAKuB,UAAY,eACb,0CACA,2BAAOA,UAAY,GAAGG,KAAO,OAAOtB,KAAO,QAAQC,MAASoB,KAAK/B,MAAME,KAAKE,MAAO6B,SAAYF,KAAKzB,cAGxG,yBAAKuB,UAAY,eACb,+CACA,2BAAOG,KAAO,OAAOH,UAAY,gBAGrC,2BAAOG,KAAO,SAASrB,MAAQ,qBAAqBkB,UAAY,c,GApDjEK,a,OC2BJC,MA5Bf,SAAmBpB,GAEf,IAAIqB,EAWJ,OARIA,EADArB,EAAMsB,SAASC,UACF,4BAAQT,UAAY,oCAAoCU,QAAW,WAC5ExB,EAAMyB,gBAAgBzB,EAAMsB,YADnB,YAKA,4BAAQR,UAAY,8CAA6C,2CAI9E,yBAAKA,UAAU,UACf,yBAAKA,UAAU,2BACX,yBAAKA,UAAU,2BACf,0BAAMA,UAAU,cAAcd,EAAMsB,SAASA,WAE7C,yBAAKR,UAAU,eACVO,MC2CFK,E,4MA7DXzC,MAAQ,CACJ0C,eAAgB,CACZ,CAACC,GAAI,EAAGN,SAAU,EAAGC,WAAW,GAChC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,GACjC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,GACjC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,GACjC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,GACjC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,GACjC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,GACjC,CAACK,GAAI,EAAGN,SAAU,GAAIC,WAAW,K,EAIzCM,yBAA2B,SAACC,EAAMC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAChC,GAAIF,IAASC,EAAMC,GAAGE,KACpB,OAAO,EAGX,OAAO,G,EAIXC,gBAAkB,WACd,IAAMC,EAAY,YAAO,EAAKpC,MAAMV,cAE9B+C,EADa,YAAO,EAAKpD,MAAM0C,gBACHW,KAAK,SAACJ,GACpC,OAAI,EAAKL,yBAAyBK,EAAKZ,SAAUc,IAC/CF,EAAKX,WAAY,EACVW,IAEPA,EAAKX,WAAY,EACVW,MAIb,EAAKrC,SAAS,CAAE8B,eAAgBU,K,EAGpCZ,gBAAkB,SAACc,GACf,EAAKvC,MAAMwC,SAASD,I,kEAIpBvB,KAAKmB,oB,+BAGC,IAAD,OACL,OACI,yBAAKrB,UAAY,aACb,+CACA,yBAAKA,UAAY,OAChBE,KAAK/B,MAAM0C,eAAeW,KAAK,SAAChB,GAC7B,OAAO,kBAAC,EAAD,CAAUmB,IAAOnB,EAASA,SAAUA,SAAYA,EAAUG,gBAAmB,EAAKA,2B,GAvDrFN,aCqETuB,E,4MAjEbzD,MAAQ,CACNE,KAAM,KACNwD,aAAc,KACdC,aAAc,KACdtD,aAAc,KACduD,SAAS,G,EAmBXC,cAAgB,SAAC3D,EAAMwD,GACrB,EAAK9C,SAAS,CAAEV,KAAMA,EAAMwD,aAAcA,EAAcE,SAAS,GAAS,EAAKhC,sB,EAGjF2B,SAAW,SAACD,GACV,EAAK1C,SAAS,CAAE+C,aAAcL,EAAKjB,UAAY,EAAKyB,qBACpDC,QAAQC,IAAI,EAAKhE,MAAM0D,e,EAIzBI,oBAAsB,WACpBG,MAAM,gDAAiD,CAErDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,EAAKtE,SAE1BuE,MAAM,SAACC,GACN,OAAOA,EAASC,UAEhBF,MAAM,SAACG,GACNX,QAAQC,IAAIU,GACZ,EAAK9D,SAAS,CAAEgD,SAAS,OAEzBe,OAAO,SAACC,GACPb,QAAQC,IAAIY,O,oEA3CI,IAAD,OACpBX,MAAM,qDAAD,OAAsDlC,KAAK/B,MAAM0D,eAEpEa,MAAM,SAACC,GACJ,OAAOA,EAASC,UAElBF,MAAM,SAACG,GACJX,QAAQC,IAAIU,GACZ,EAAK9D,SAAS,CAAEP,aAAcqE,EAAQd,SAAS,IAAO,kBAGxDe,OAAO,SAACC,GACLb,QAAQC,IAAIY,Q,+BAoCnB,OACE,6BACC,kBAAC,EAAD,CAAM5D,aAAgBe,KAAK8B,gBAC3B9B,KAAK/B,MAAM0D,cAAgB3B,KAAK/B,MAAM4D,SAAW,kBAAC,EAAD,CAAWL,SAAYxB,KAAKwB,SAAUlD,aAAgB0B,KAAK/B,MAAMK,oB,GA7DvG6B,aCAlB2C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7D,SAAS8D,eAAe,U","file":"static/js/main.bced5f0a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nconst M = window.M;\n\n\nclass Form extends Component {\n    \n    state = {\n        date: '',\n        user: {\n            fullName: 'John Doe',\n            email: 'jd@gmail.com'\n        },\n        availability: []\n    }\n   \n    componentDidMount() {\n            let elems = document.querySelectorAll('.datepicker');\n            let instances = M.Datepicker.init(elems, { disableWeekends: true, format: 'dd, mm, yyyy' });\n            let instance = instances[0];\n            instance.options.onSelect = () => {\n                this.setState({ date: instance.date.toString() }, this.fetchAvailableTimes)\n            }\n    }\n\n    updateUser = (event) => {\n        const { user } = { ...this.state };\n        const currentState = user;\n        const { name, value } = event.target;\n        currentState[name] = value;\n        this.setState({ user: currentState });\n    }\n\n    formSubmit = (event) => {\n        event.preventDefault();\n        this.props.handleSubmit(this.state.user, this.state.date);\n    }\n\n    render() {\n        return (\n            <div className = 'container'>\n                <form onSubmit = {this.formSubmit}>\n                    <div className = 'input-field'>\n                        <label>Full Name:</label>\n                        <input className = '' type = 'text' name = 'fullName' value = {this.state.user.fullName} onChange = {this.updateUser}></input>\n                    </div>\n\n                    <div className = 'input-field'>\n                        <label>Email: </label>\n                        <input className = '' type = 'text' name = 'email' value = {this.state.user.email} onChange = {this.updateUser}></input>\n                    </div>\n\n                    <div className = 'input-field'>\n                        <label>Select Date:</label>\n                        <input type = 'text' className = 'datepicker'></input>\n                    </div>\n\n                    <input type = 'submit' value = 'Check Availability' className = 'btn' ></input>\n\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default Form;","import React from 'react';\n\n\nfunction TimeSlot (props) {\n\n    let actionLink;\n\n    if (props.timeSlot.available) {\n        actionLink = <button className = 'btn-flat amber-text text-accent-4' onClick = {() => {\n            props.bookAppointment(props.timeSlot)\n        }}>Book Now</button>;\n        \n    } else {\n        actionLink = <button className = 'btn-flat amber-text text-accent-4 disabled'><s>Unavaliable</s></button>;\n    }\n\n    return (\n        <div className=\"col s3\">\n        <div className=\"card blue-grey darken-1\">\n            <div className=\"card-content white-text\">\n            <span className=\"card-title\">{props.timeSlot.timeSlot}</span>\n            </div>\n            <div className=\"card-action\">\n                {actionLink}\n            </div>\n        </div>\n        </div>\n\n    )\n}\n\nexport default TimeSlot;","import React, { Component } from 'react';\nimport TimeSlot from './TimeSlot';\n\nclass TimeSlots extends Component {\n\n    state = {\n        availableTimes: [\n            {id: 0, timeSlot: 9, available: true},\n            {id: 1, timeSlot: 10, available: true},\n            {id: 2, timeSlot: 11, available: true},\n            {id: 3, timeSlot: 12, available: true},\n            {id: 4, timeSlot: 13, available: true},\n            {id: 5, timeSlot: 14, available: true},\n            {id: 6, timeSlot: 15, available: true},\n            {id: 7, timeSlot: 16, available: true},\n        ]\n    }\n\n    checkAvailabilityInArray = (item, array) => {\n        for (let i = 0; i < array.length; i++) {\n          if (item === array[i].slot) {\n            return true;\n          } \n        }\n        return false;\n      };\n\n\n    setAvailability = () => {\n        const anotherArray = [...this.props.availability];\n        const newStateArray = [...this.state.availableTimes];\n        const mappedArray = newStateArray.map( (slot) => {\n            if (this.checkAvailabilityInArray(slot.timeSlot, anotherArray)) {\n              slot.available = false;\n              return slot;\n            } else {\n              slot.available = true;\n              return slot;\n            }\n          });\n        \n        this.setState({ availableTimes: mappedArray });\n    }\n\n    bookAppointment = (time) => {\n        this.props.bookSlot(time);\n    }\n\n    componentDidMount() {\n        this.setAvailability();\n    }\n\n    render() {\n        return (\n            <div className = 'container'>\n                <h4>Available Slots</h4>\n                <div className = 'row'>\n                {this.state.availableTimes.map( (timeSlot) => {\n                    return <TimeSlot key = {timeSlot.timeSlot} timeSlot = {timeSlot} bookAppointment = {this.bookAppointment}/>\n                })}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default TimeSlots;","import React, { Component } from 'react';\nimport Form from './Components/Form';\nimport TimeSlots from './Components/TimeSlots';\n\n\nclass App extends Component {\n\n  state = {\n    user: null,\n    selectedDate: null,\n    selectedTime: null,\n    availability: null,\n    refresh: false\n  }\n\n  fetchAvailableTimes() {\n    fetch(`https://appointment-app-server.herokuapp.com/date/${this.state.selectedDate}`)\n    // fetch(`http://localhost:3000/date/${this.state.date}`)\n     .then( (response) => {\n         return response.json();\n     })\n      .then( (result) => {\n          console.log(result);\n          this.setState({ availability: result, refresh: true}, () => {\n          });\n      })\n       .catch( (error) => {\n           console.log(error);\n       })\n}   \n\n  showTimeSlots = (user, selectedDate) => {\n    this.setState({ user: user, selectedDate: selectedDate, refresh: false }, this.fetchAvailableTimes);\n  }\n\n  bookSlot = (time) => {\n    this.setState({ selectedTime: time.timeSlot }, this.sendRequestToServer);\n    console.log(this.state.selectedDate);\n  }\n\n\n  sendRequestToServer = () => {\n    fetch(`https://appointment-app-server.herokuapp.com/`, {\n      // fetch(`http://localhost:3000/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    })\n     .then( (response) => {\n       return response.json()\n     })\n      .then( (result) => {\n        console.log(result);\n        this.setState({ refresh: false });\n      })\n       .catch( (error) => {\n         console.log(error)\n       })\n  }\n\n  render() {\n    return (\n      <div>\n       <Form handleSubmit = {this.showTimeSlots} />\n      {this.state.selectedDate && this.state.refresh && <TimeSlots bookSlot = {this.bookSlot} availability = {this.state.availability} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}